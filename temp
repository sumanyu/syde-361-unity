  # Temp disabling
  # if debug:
  #   print "****** Statistics ******"

  #   print 'min Theta: ', min(theta)
  #   print 'max Theta: ', max(theta)

  #   print 'min Alpha: ', min(alpha)
  #   print 'max Alpha: ', max(alpha)

  #   print 'min Beta: ', min(beta)
  #   print 'max Beta: ', max(beta)

  #   print 'min Gamma: ', min(gamma)
  #   print 'max Gamma: ', max(gamma)

  #   print 'min X: ', min(X)
  #   print 'max X: ', max(X)

  #   print 'min Y: ', min(Y)
  #   print 'max Y: ', max(Y)

  #   print 'min Z: ', min(Z)
  #   print 'max Z: ', max(Z)

  #   print 'min O: ', min(O)
  #   print 'max O: ', max(O)

  #   # Plot T vs. Output

  #   # First figure
  #   plt.figure(1)

  #   time_array = np.linspace(0.0, float(t), t)
  #   # print len(time_array)
  #   output_array = np.array(O)
  #   # print len(output_array)

  #   # Theta
  #   plt.subplot(211)
  #   plt.plot(time_array, output_array)
  #   plt.xlabel('Time (s)')
  #   plt.ylabel('Output (vol)')
  #   plt.title('Output vs. Time')

  #   plt.grid()
  #   plt.show()

  # L = len(data['eeg'])-N

  # # For each window take FFT, determine the magnitude for ranges
  # for i in range(L):
  #   x = data['x'][i:N+i]
  #   y = np.array(data['y'][i:N+i])

  #   # Frequency domain
  #   yf = fft(y)
  #   yf = 2.0/N * np.abs(yf[0:N/2])

  #   # Get the theta, alpha, beta, gamma average magnitudes

  #   # Theta 4 – 7
  #   theta_avg = sum(yf[theta_start:theta_end])/len(yf[theta_start:theta_end])
  #   theta.append(theta_avg)
    
  #   # Alpha 8 – 15
  #   alpha_avg = sum(yf[alpha_start:alpha_end])/len(yf[alpha_start:alpha_end])
  #   alpha.append(alpha_avg)

  #   # Beta 16 – 31
  #   beta_avg = sum(yf[beta_start:beta_end])/len(yf[beta_start:beta_end])
  #   beta.append(beta_avg)

  #   # Gamma 32 - 64
  #   gamma_avg = sum(yf[gamma_start:gamma_end])/len(yf[gamma_start:gamma_end])
  #   gamma.append(gamma_avg)

  #   t.append(x[-1])

  # # Convert to np.array
  # for ar in [t, theta, alpha, beta, gamma]:
  #   ar = np.array(ar)

  # # First figure
  # plt.figure(1)

  # # Theta
  # plt.subplot(221)
  # plt.plot(t, theta)
  # plt.xlabel('Time (s)')
  # plt.ylabel('Magnitude (dB)')
  # plt.title('Theta vs. Time')

  # # Alpha
  # plt.subplot(222)
  # plt.plot(t, alpha)
  # plt.xlabel('Time (s)')
  # plt.ylabel('Magnitude (dB)')
  # plt.title('Alpha vs. Time')

  # # Beta
  # plt.subplot(223)
  # plt.plot(t, beta)
  # plt.xlabel('Time (s)')
  # plt.ylabel('Magnitude (dB)')
  # plt.title('Beta vs. Time')

  # # Gamma
  # plt.subplot(224)
  # plt.plot(t, gamma)
  # plt.xlabel('Time (s)')
  # plt.ylabel('Magnitude (dB)')
  # plt.title('Gamma vs. Time')

  # plt.grid()
  # plt.show(block=True)


  """
def process_data(data):
  # Number of samplepoints
  N = len(data['x'])

  # sample spacing - Play around with this
  # This is approximately the spacing of the actual data
  T = 1.0 / 550.0
  # x = np.linspace(0.0, N*T, N)
  
  x = np.array(data['x'])
  y = np.array(data['y'])

  # Frequency domain
  yf = fft(y)

  # Use simplifying assumption that x are evenly spaced
  xf = np.linspace(0.0, 1.0/(2.0*T), N/2)

  # First figure
  plt.figure(1)

  # Time domain
  plt.subplot(211)
  plt.plot(data['x'], data['y'])
  plt.xlabel('Time (s)')
  plt.ylabel('EEG (mV)')
  plt.title('EEG vs. Time')

  # Frequency domain
  plt.subplot(212)
  plt.plot(xf, 2.0/N * np.abs(yf[0:N/2]))
  plt.xlabel('Frequency (Hz)')
  plt.ylabel('Magnitude (dB)')
  plt.title('Magnitude vs. Frequency')

  # xmin xmax ymin ymax
  plt.axis([1, 40, 0, 6])

  # plt.plot(data['x'], data['y'])
  plt.grid()
  plt.show()

def restrict_data(data, factor):
  for key in data:
    to = len(data[key])/factor
    data[key] = data[key][0: to]

  return data
"""


"""
def interactive_plot(q):
  # Interactive on
  plt.ion()

  plt.xlabel('Time (s)')
  plt.ylabel('EEG (mV)')
  plt.title('EEG vs. Time')
  plt.axis([0, 40000, -1000, 1000])

  plt.show()

  # x = data['x']
  # y = data['y']

  xs = np.array([])
  ys = np.array([])

  ax = plt.figure().gca()

  line, = ax.plot(xs, ys)

  # for x, y in zip(data['x'], data['y'])[0::100]:
  rate = 512
  i = 0
  while not q.empty():
    if i%rate:
      i = 0
      continue
    i += 1

    d = q.get()
    x = d['x']
    y = d['y']
    xs = np.append(xs, x)
    ys = np.append(ys, y)
    line.set_data(xs, ys)
    plt.scatter(x, y, s=1)
    plt.draw()
    # time.sleep(0.000001)

  plt.ioff()
"""